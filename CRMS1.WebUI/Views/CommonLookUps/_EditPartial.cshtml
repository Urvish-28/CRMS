@model CRMS1.Core.ViewModels.CommonLookupsViewModel


<!-- Bootstrap CSS -->
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">


<div class="modal fade" id="editmodal" tabindex="-1" role="dialog" aria-labelledby="commonLookupLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content w-500">
            <div class="modal-header">
                <h3 class="modal-title" id="commonLookupLabel">Edit CommonLookup</h3>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <form name="Editform" id="myform">
                    @Html.HiddenFor(model => model.Id)
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.ConfigName, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.ConfigName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ConfigName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.ConfigKey, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.ConfigKey, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ConfigKey, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.ConfigValue, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.ConfigValue, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ConfigValue, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.DisplayOrder, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.DisplayOrder, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <label class="switch">
                                <input type="checkbox" id="toggle" name="IsActive" class="form-control" @(Model.IsActive ? "checked" : "") />
                                <span class="slider round"></span>
                            </label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" onclick="closePopup()">Close</button>
                        <button type="submit" class="btn btn-success">Save</button>  
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>



<script src='@Url.Content("~/Scripts/jquery.validate.js")' type='text/javascript'></script>
<script src='@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")' type='text/javascript'></script>
<script>
    //Toggle Switch
    function editOnChange() {
        if ($("#toggle").prop('checked')) {
            $("#toggle").attr('checked', true);
            $('#toggle').val(true);
        }
        else {
            $("#toggle").attr('checked', false);
            $('#toggle').val(false);
        }
    }
        function closePopup() {
        location.href = '@Url.Action("DashBoard" , "Account" ,new { selectedTabId = 2 })';
    }

    //Edit:Post Bootstrap Modal
    $('#myform').submit(function (e) {
        e.preventDefault();
        editOnChange();
        var $form = $(this);
        if (!$form.valid) return false;
        var ConfigName = $('#ConfigName').val();
        var ConfigKey = $('#ConfigKey').val();
        if (ConfigName != "" && (ConfigName == ConfigKey)) {
            alert("ConfigName and ConfigKey not be Same")
            return false;
        }

        $.ajax({
            url: '@Url.Action("Edit","CommonLookUps")',
            type: "Post",
            data: $("form").serialize(),
            success: function (data) {
                if (data == "true") {
                    location.href = '@Url.Action("DashBoard" , "Account" ,new { selectedTabId = 2 })';
                }
                else if (data == "Exists") {
                    alert("Data Already Exists");
                }
            }
        });
    });
</script>

<style>
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        height: 25px;
        width: 50px;
        border-radius: 34px;
    }

        .slider.round:before {
            height: 18px;
            width: 18px;
            border-radius: 50%;
        }
</style>